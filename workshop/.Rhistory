# set working directory to the location of this file
# assuming we are using RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Specify list of packages to download/install
pkgs <-
c(
#prereqs
'codetools',
"Rcpp",
# tidyverse & stat testing
"broom",
"DBI",
"dplyr",
"dunn.test",
"FSA",
"forcats",
"formatR",
"ggplot2",
"haven",
"httr",
"hms",
"infer",
"jsonlite",
"lubridate",
"magrittr",
"modelr",
"purrr",
"readr",
"readxl",
"scales",
"stringr",
"tibble",
"rvest",
"tidyr",
"xml2",
# writing
'devtools',
'rmarkdown',
'knitr',
'bookdown',
'git2r',
#vis
'viridis',
'plotly',
'ggforce',
'ggpmisc',
'ggrepel',
'gridExtra',
'cowsay',
'svglite',
# GIS
"sf",
"sp",
"spatstat",
"rgdal",
"rgeos",
"ggmap",
"maptools"
)
# These lines are for creating the local miniCRAN repository:
library("miniCRAN")
install.packages("miniCRAN")
# These lines are for creating the local miniCRAN repository:
library("miniCRAN")
# Make list of package URLs
rstudio <- c(CRAN = "http://cran.rstudio.com")
os <- c("source", "mac.binary", "mac.binary.mavericks", "win.binary")
for(i in seq_along(os)) {
pkgList <- pkgDep(pkgs,
repos = rstudio,
type = os[i])
# pkgList
# # Set location to store source files, assume we are in dir of this file
# getwd()
#
# # Make repo for source
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i])
}
getwd()
library("miniCRAN")
# Make list of package URLs
rstudio <- c(CRAN = "http://cran.rstudio.com")
os <- c("source", "mac.binary", "mac.binary.mavericks", "win.binary")
for(i in seq_along(os)) {
pkgList <- pkgDep(pkgs,
repos = rstudio,
type = os[i])
# pkgList
# # Set location to store source files, assume we are in dir of this file
# getwd()
#
# # Make repo for source
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i])
}
i
?pkgDep
os <- c("source", "mac.binary", "win.binary")
pkgList <- pkgDep(pkgs,
repos = rstudio,
type = os[i])
pkgList <- pkgDep(""ggplot2,
repos =  c(CRAN = "http://cran.rstudio.com"),
type = "mac.binary")
c(CRAN = "http://cran.rstudio.com")
pkgList <- pkgDep("ggplot2",
repos =  c(CRAN = "http://cran.rstudio.com"),
type = "mac.binary")
pkgList <- pkgDep("ggplot2"
type = "mac.binary")
pkgList <- pkgDep("ggplot2",
type = "mac.binary")
pkgList <- pkgDep("ggplot2", type = "mac.binary")
pkgList <- pkgDep("ggplot2", type = "mac.binary")
?download.packages().
?download.packages()
pkgList <- pkgDep("ggplot2", type = "mac.binary.el-capitan")
pkgList <- pkgDep("ggplot2", type = "mac.binary")
install.packages("Hmisc", type = "mac.binary")
utils::install.packages("Hmisc", type = "mac.binary")
# Make list of package URLs
options(repos='http://cran.rstudio.com/')
pkgList <- pkgDep(pkgs,
repos = rstudio,
type = os[i])
i
os[i]
pkgList <- pkgDep(pkgs,
repos = rstudio,
type = os[i])
pkgList
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i])
# set working directory to the location of this file
# assuming we are using RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Specify list of packages to download/install
pkgs <-
c(
#prereqs
'codetools',
"Rcpp",
# tidyverse & stat testing
"broom",
"DBI",
"dplyr",
"dunn.test",
"FSA",
"forcats",
"formatR",
"ggplot2",
"haven",
"httr",
"hms",
"infer",
"jsonlite",
"lubridate",
"magrittr",
"modelr",
"purrr",
"readr",
"readxl",
"scales",
"stringr",
"tibble",
"rvest",
"tidyr",
"xml2",
# writing
'devtools',
'rmarkdown',
'knitr',
'bookdown',
'git2r',
#vis
'viridis',
'plotly',
'ggforce',
'ggpmisc',
'ggrepel',
'gridExtra',
'cowsay',
'svglite',
# GIS
"sf",
"sp",
"spatstat",
"rgdal",
"rgeos",
"ggmap",
"maptools"
)
# These lines are for creating the local miniCRAN repository:
library("miniCRAN")
# Make list of package URLs
rstudio <- c(CRAN = "http://cran.rstudio.com")
os <- c("source", "mac.binary",  "win.binary")
i <- 2
pkgList <- pkgDep(pkgs,
repos = rstudio,
type = os[i])
pkgDep
# These lines are for creating the local miniCRAN repository:
library("miniCRAN")
# Specify list of packages to download/install
pkgs <-
c(
#prereqs
'codetools',
"Rcpp",
# tidyverse & stat testing
"broom",
"DBI",
"dplyr",
"dunn.test",
"FSA",
"forcats",
"formatR",
"ggplot2",
"haven",
"httr",
"hms",
"infer",
"jsonlite",
"lubridate",
"magrittr",
"modelr",
"purrr",
"readr",
"readxl",
"scales",
"stringr",
"tibble",
"rvest",
"tidyr",
"xml2",
# writing
'devtools',
'rmarkdown',
'knitr',
'bookdown',
'git2r',
#vis
'viridis',
'plotly',
'ggforce',
'ggpmisc',
'ggrepel',
'gridExtra',
'cowsay',
'svglite',
# GIS
"sf",
"sp",
"spatstat",
"rgdal",
"rgeos",
"ggmap",
"maptools"
)
pkgDep
pkgDep
pkgDep
R.version()
miniCRAN:::R.version()
R.Version()
?pkgDep
R.version()
R.Version()
i %% 2
i <- 2
i %% 2
3 %% 2
1 %% 2
R.version
i
ifelse(i %% 2 == 0, 3.3,  R.version)
# Make list of package URLs
rstudio <- c(CRAN = "http://cran.rstudio.com")
os <- c("source", "mac.binary",  "win.binary")
pkgList <- pkgDep(pkgs,
repos = rstudio,
type = os[i],
Rversion = ifelse(i %% 2 == 0, 3.3,  R.version))
pkgList
# Specify list of packages to download/install
pkgs <-
c(
#prereqs
'codetools',
"Rcpp",
# tidyverse & stat testing
"broom",
"DBI",
"dplyr",
"dunn.test",
"FSA",
"forcats",
"formatR",
"ggplot2",
"haven",
"httr",
"hms",
"infer",
"jsonlite",
"lubridate",
"magrittr",
"modelr",
"purrr",
"readr",
"readxl",
"scales",
"stringr",
"tibble",
"rvest",
"tidyr",
"xml2",
# writing
'devtools',
'rmarkdown',
'knitr',
'bookdown',
'git2r',
#vis
'viridis',
'plotly',
'ggforce',
'ggpmisc',
'ggrepel',
'gridExtra',
'cowsay',
'svglite',
# GIS
"sf",
"sp",
"spatstat",
"rgdal",
"rgeos",
"ggmap",
"maptools"
)
i <-  1
pkgList <- pkgDep(pkgs,
repos = rstudio,
type = os[i])
pkgList
i <- 2
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i])
# pkgList
# # Set location to store source files, assume we are in dir of this file
# getwd()
#
# # Make repo for source
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i],
Rversion = 3.3)
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i],
Rversion = 3.3)
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i],
Rversion = 3.2)
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i],
Rversion = 3.2)
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i],
Rversion = 3.2)
getwd()
# set working directory to the location of this file
# assuming we are using RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i],
Rversion = 3.2)
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i],
Rversion = 3.2)
# pkgList
# # Set location to store source files, assume we are in dir of this file
# getwd()
#
# # Make repo for source
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i],
Rversion = 3.3)
getwd()
makeRepo
# pkgList
# # Set location to store source files, assume we are in dir of this file
# getwd()
#
# # Make repo for source
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i],
Rversion = 3.4)
# pkgList
# # Set location to store source files, assume we are in dir of this file
# getwd()
#
# # Make repo for source
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i])
?install.packages
install.packages(pkgList,
repos = rstudio,
type = "mac.binary",
lib = getwd(),
destdir = getwd())
install.packages(pkgList, repos = rstudio, type = "mac.binary", lib = getwd(), destdir = getwd())
os <- c("source", "mac.binary.el-capitan",  "win.binary")
pkgList <- pkgDep(pkgs,
repos = rstudio,
type = os[i])
i
makeRepo(pkgList,
path = getwd(),
repos = rstudio,
type = os[i])
